¿Cuál es la diferencia fundamental entre una "estructura de información" y una "estructura de almacenamiento"?;Una **estructura de información** describe las relaciones lógicas inherentes a los datos del mundo real (ej: un auto fue fabricado en un año específico).<br>Una **estructura de almacenamiento** describe las relaciones físicas de cómo se organizan esos datos en la memoria de un ordenador (ej: en celdas contiguas de un vector), afectando la eficiencia pero no el significado.
¿Qué es un Árbol de Expresión?;Es un árbol binario que se utiliza para representar de forma no ambigua expresiones algebraicas o lógicas. Su propia estructura define el orden y la precedencia de las operaciones.
¿Qué tipo de elementos se colocan en las hojas de un Árbol de Expresión?;Las **hojas** (nodos sin hijos) de un árbol de expresión siempre son **operandos** (variables, constantes).
¿Qué tipo de elementos se colocan en los nodos internos (y en la raíz) de un Árbol de Expresión?;Los **nodos internos** (nodos con hijos) de un árbol de expresión siempre son **operadores** (binarios como `+`, `*`, `⇒` o unarios como `log`, `!`).
Para un operador binario \(\theta\) en un nodo, ¿qué representan sus subárboles izquierdo (\(E_1\)) y derecho (\(E_2\))?;El subárbol izquierdo \(E_1\) representa toda la sub-expresión a la izquierda del operador, y el subárbol derecho \(E_2\) representa toda la sub-expresión a la derecha. El nodo representa la expresión completa \(E_1 \theta E_2\).
En un árbol de expresión para un operador unario, ¿cómo se determina qué subárbol queda vacío?;Depende de la notación del operador:<ul><li>Si el operador es **prefijo** (va antes, ej: `log(x)`), el operando va en el subárbol **derecho** y el izquierdo queda vacío.</li><li>Si el operador es **postfijo** (va después, ej: `n!`), el operando va en el subárbol **izquierdo** y el derecho queda vacío.</li></ul>
Dibuja el árbol de expresión para la expresión lógica `(a ∧ b) ⇒ (d ∨ c)`.;\[ \begin{tikzpicture}[level distance=1.2cm, level 1/.style={sibling distance=3cm}, level 2/.style={sibling distance=2cm}, every node/.style={circle, draw} ]  \node {\(\Rightarrow\)}    child { node {\(\land\)}       child { node {\(a\)} }      child { node {\(b\)} }    }    child { node {\(\lor\)}      child { node {\(d\)} }      child { node {\(c\)} }    }; \end{tikzpicture} \]
¿Cómo influye la precedencia de operadores en la estructura de un árbol de expresión?;Un operador con **mayor prioridad** se convierte en un nodo "más profundo" en el árbol, es decir, pasa a ser hijo de un operador con menor prioridad. Por ejemplo, en `A + B * C`, el `*` es hijo del `+`.
¿Qué son los "recorridos" (o barridos) de un árbol?;Son algoritmos sistemáticos para visitar cada nodo del árbol exactamente una vez. Las tres formas recursivas principales son Preorden, Inorden y Postorden.
Describe el recorrido **Preorden** (Pre-order).;Es un recorrido de tipo "Raíz - Izquierda - Derecha".<ol><li>Se **visita** el nodo raíz actual.</li><li>Se recorre recursivamente todo el subárbol **izquierdo**.</li><li>Se recorre recursivamente todo el subárbol **derecho**.</li></ol>
Describe el recorrido **Inorden** (In-order).;Es un recorrido de tipo "Izquierda - Raíz - Derecha".<ol><li>Se recorre recursivamente todo el subárbol **izquierdo**.</li><li>Se **visita** el nodo raíz actual.</li><li>Se recorre recursivamente todo el subárbol **derecho**.</li></ol>
Describe el recorrido **Postorden** (Post-order).;Es un recorrido de tipo "Izquierda - Derecha - Raíz".<ol><li>Se recorre recursivamente todo el subárbol **izquierdo**.</li><li>Se recorre recursivamente todo el subárbol **derecho**.</li><li>Se **visita** el nodo raíz actual.</li></ol>
¿Qué tipo de notación de expresión se obtiene al realizar un recorrido **Preorden** sobre un árbol de expresión?;Se obtiene la **Notación Prefija**, también conocida como Notación Polaca. El operador siempre aparece antes que sus operandos.
¿Qué tipo de notación de expresión se obtiene al realizar un recorrido **Postorden** sobre un árbol de expresión?;Se obtiene la **Notación Postfija**, también conocida como Notación Polaca Inversa (RPN). El operador siempre aparece después de sus operandos.
¿Qué tipo de notación de expresión se obtiene al realizar un recorrido **Inorden** sobre un árbol de expresión?;Se obtiene la **Notación Infija**, que es la forma convencional de escribir expresiones. Sin embargo, el recorrido simple no reconstruye los paréntesis, lo que puede generar ambigüedad.
Dado el árbol para `(a ∧ b) ⇒ (d ∨ c)`, ¿cuál es el resultado del recorrido **Preorden**?;El resultado es: `⇒ ∧ a b ∨ d c`
Dado el árbol para `(a ∧ b) ⇒ (d ∨ c)`, ¿cuál es el resultado del recorrido **Postorden**?;El resultado es: `a b ∧ d c ∨ ⇒`
Dado el árbol para `(a ∧ b) ⇒ (d ∨ c)`, ¿cuál es el resultado del recorrido **Inorden** (sin paréntesis)?;El resultado es: `a ∧ b ⇒ d ∨ c`
¿Qué es el "barrido por niveles" (Level-Order Traversal)?;Es un recorrido que visita los nodos de arriba hacia abajo y, en cada nivel, de izquierda a derecha. No es recursivo y requiere una **cola (Queue)** como estructura auxiliar. Su resultado no tiene un significado algebraico directo.
¿Qué resultado especial se obtiene al realizar un recorrido **Inorden** sobre un **Árbol Binario de Búsqueda (ABB)**?;Se obtiene un listado de todos los elementos del árbol en **orden ascendente**.
¿Cómo funciona el algoritmo de ordenamiento **Treesort**?;Es un método de ordenamiento que aprovecha la propiedad del recorrido inorden en un ABB.<ol><li>Se construye un Árbol Binario de Búsqueda (ABB) insertando todos los elementos del conjunto desordenado.</li><li>Se realiza un único barrido **Inorden** sobre el árbol construido.</li></ol>El resultado es el conjunto de elementos ordenado de menor a mayor.
Dibuja el árbol de expresión para `(a + e + (b - c) * d / c)`. (Figura 3 del documento);\[ \begin{tikzpicture}[level distance=1.2cm, level 1/.style={sibling distance=4cm}, level 2/.style={sibling distance=2.5cm}, level 3/.style={sibling distance=2cm}, every node/.style={circle, draw}] \node{+} child{ node{+} child{node{a}} child{node{e}} } child{ node{/} child{ node{*} child{node{-} child{node{b}} child{node{c}}} child{node{d}} } child{node{c}} }; \end{tikzpicture} \]