¿Cuál es la definición formal y recursiva de un Ábol Binario Ordenado \(A\) sobre un conjunto de valores \(V\)?;Un árbol \(A\) perteneciente a la familia \(\mathcal{A_V}\) se define como: <ol><li><b>Caso Base:</b> El árbol vacío es un árbol binario ordenado: \( \Lambda \in \mathcal{A_V} \)</li><li><b>Paso Recursivo:</b> Si \(A_1, A_2 \in \mathcal{A_V}\) y \(v \in V\), entonces la tupla \( A = (A_1, v, A_2) \) también es un árbol binario ordenado.</li></ol>
¿Qué significan los términos "binario" y "ordenado" en la definición de un árbol binario ordenado?;<ul><li><b>Binario:</b> Significa que cada nodo (raíz) se ramifica en un máximo de <b>dos</b> subárboles.</li><li><b>Ordenado:</b> Significa que la posición de los subárboles importa. El árbol \( (A_1, v, A_2) \) es distinto de \( (A_2, v, A_1) \). Se distingue entre un subárbol izquierdo y uno derecho.</li></ul>
¿Cuál es la definición recursiva de la altura \(h(A)\) de un árbol binario?;<ol><li><b>Caso Base:</b> La altura de un árbol vacío es 0.<br>\( h(\Lambda) = 0 \)</li><li><b>Paso Recursivo:</b> La altura de un árbol no vacío es 1 más la altura máxima de sus dos subárboles.<br>\( h((A_1, v, A_2)) = \max\{h(A_1), h(A_2)\} + 1 \)</li></ol>
¿Qué diferencia conceptual existe entre los nodos internos y los nodos externos de un árbol binario?;<ul><li><b>Nodos Internos:</b> Son los nodos que existen físicamente en la estructura y almacenan un valor del conjunto.</li><li><b>Nodos Externos:</b> Son una abstracción que representa los "huecos" del árbol (los punteros `nil`). Indican los lugares donde una búsqueda fracasaría y donde se podrían insertar nuevos elementos.</li></ul>
¿Cuál es la definición recursiva de la cantidad de nodos internos \(i(A)\) de un árbol?;<ol><li><b>Caso Base:</b> Un árbol vacío tiene 0 nodos internos.<br>\( i(\Lambda) = 0 \)</li><li><b>Paso Recursivo:</b> El número de nodos internos de un árbol es la suma de los nodos internos de sus subárboles más uno (la raíz).<br>\( i((A_1, v, A_2)) = i(A_1) + i(A_2) + 1 \)</li></ol>
¿Cuál es la definición recursiva de la cantidad de nodos externos \(e(A)\) de un árbol?;<ol><li><b>Caso Base:</b> Un árbol vacío consiste en un único nodo externo.<br>\( e(\Lambda) = 1 \)</li><li><b>Paso Recursivo:</b> El número de nodos externos de un árbol es la suma de los nodos externos de sus subárboles.<br>\( e((A_1, v, A_2)) = e(A_1) + e(A_2) \)</li></ol>
En cualquier árbol binario A, ¿cuál es la relación fundamental entre su número de nodos externos \(e(A)\) y su número de nodos internos \(i(A)\)?;El número de nodos externos es siempre exactamente uno más que el número de nodos internos.<br>\[ e(A) = i(A) + 1 \]
¿Qué es la Suma de Longitudes de Camino a Nodos Internos, \(I(A)\), y cuál es su definición recursiva?;\(I(A)\) es la suma de las profundidades de todos los nodos internos del árbol.<ol><li>\( I(\Lambda) = 0 \)</li><li>\( I((A_1, v, A_2)) = I(A_1) + I(A_2) + i(A_1) + i(A_2) \)</li></ol>
¿Qué es la Suma de Longitudes de Camino a Nodos Externos, \(E(A)\), y cuál es su definición recursiva?;\(E(A)\) es la suma de las profundidades de todos los nodos externos (los "huecos") del árbol.<ol><li>\( E(\Lambda) = 0 \)</li><li>\( E((A_1, v, A_2)) = E(A_1) + E(A_2) + e(A) \)</li></ol>
En cualquier árbol binario A, ¿cuál es la relación entre la suma de longitudes de camino a nodos externos (\(E(A)\)) e internos (\(I(A)\))?;La suma de longitudes de camino a nodos externos es igual a la suma de longitudes de camino a nodos internos más el doble del número de nodos internos.<br>\[ E(A) = I(A) + 2 \cdot i(A) \]
¿Cuál es la propiedad de orden que define a un **Ábol Binario de Búsqueda (BST)**?;Para cualquier nodo con valor \(v\):<ol><li>Todos los valores en su subárbol izquierdo deben ser **menores** que \(v\).</li><li>Todos los valores en su subárbol derecho deben ser **mayores** que \(v\).</li><li>Ambos subárboles deben ser también árboles binarios de búsqueda.</li></ol>
¿Cuál es el costo (en celdas consultadas) de una búsqueda exitosa y una fracasada en un BST?;<ul><li>Una búsqueda **exitosa** que termina en un nodo interno a profundidad \(d\) tiene un costo de \(d+1\).</li><li>Una búsqueda **fracasada** que termina en un nodo externo a profundidad \(d\) tiene un costo de \(d\).</li></ul>
En un análisis "a posteriori" (sobre un árbol ya construido), ¿cuál es el esfuerzo **máximo** (peor caso) de localización?;El esfuerzo máximo, tanto para una búsqueda exitosa como para una que fracasa, es igual a la **altura del árbol**, \(h(A)\).
Dado un BST con \(N\) nodos, ¿cuál es la fórmula para el esfuerzo **medio** de localización exitosa (\(C_N\))?;Es el promedio de las longitudes de camino a todos los nodos internos, más uno.<br>\[ C_N = \frac{I(A)}{N} + 1 = \frac{I(A)}{i(A)} + 1 \]
Dado un BST con \(N\) nodos, ¿cuál es la fórmula para el esfuerzo **medio** de localización que fracasa (\(C'_N\))?;Es el promedio de las longitudes de camino a todos los nodos externos.<br>\[ C'_N = \frac{E(A)}{N+1} = \frac{E(A)}{e(A)} \]
¿Qué significa realizar un análisis "a priori" del esfuerzo medio de un BST?;Significa calcular el esfuerzo medio promediando el rendimiento sobre **todos los posibles árboles** que pueden formarse al insertar \(N\) claves en las \(N!\) posibles permutaciones de entrada, asumiendo que cada permutación es igualmente probable.
¿Cuál es la relación recursiva clave entre el costo medio de una búsqueda exitosa \(C_N\) y una fracasada \(C'_{N-1}\) en un análisis a priori?;El costo promedio para encontrar un elemento en un árbol de \(N\) nodos es 1 más que el costo promedio de la búsqueda fracasada que se tuvo que hacer para insertarlo en un árbol de \(N-1\) nodos.<br>\[ C_N \approx 1 + C'_{N-1} \]
¿A qué fórmula de recurrencia se llega para el costo medio de fracaso \(C'_N\) en un análisis a priori?;A través de un desarrollo algebraico, se llega a la siguiente recurrencia:<br>\[ C'_N = C'_{N-1} + \frac{2}{N+1} \]
¿Cuál es la solución a la recurrencia para \(C'_N\) y su aproximación usando el Número Armónico \(H_N\)?;La solución exacta, sabiendo que \(C'_0=0\), es:<br>\[ C'_N = 2(H_{N+1} - 1) \]<br>Dado que el número armónico \(H_N \approx \ln(N)\), la aproximación es:<br>\[ C'_N \approx 2 \ln(N) \]
¿Cuál es la conclusión fundamental sobre el esfuerzo medio de localización (exitosa y fracasada) en un BST construido aleatoriamente?;El esfuerzo medio de localización en un BST generado por inserciones aleatorias es de orden logarítmico.<br>\[ C_N \approx C'_N \approx 2 \ln N = O(\log N) \]
¿Cuál es el principal problema del BST estándar y en qué escenario ocurre?;Su principal problema es el **peor caso**. Si los elementos se insertan en orden (o en orden inverso), el árbol degenera en una estructura similar a una lista enlazada, y su altura se vuelve \(N\). En este escenario, el costo de búsqueda es lineal, \(O(N)\).
¿Qué es un Ábol AVL y cuál es su propiedad definitoria?;Un Ábol AVL es un **Ábol Binario de Búsqueda auto-balanceable en altura**. Su propiedad definitoria es que para cada nodo en el árbol, la diferencia de altura entre su subárbol izquierdo y su subárbol derecho (el "factor de balance") debe ser como máximo 1.<br>\[ |h(A_{izq}) - h(A_{der})| \le 1 \]
¿Qué garantiza la propiedad de balance de los árboles AVL?;Garantiza que la altura del árbol se mantiene siempre en el orden de \(O(\log N)\), incluso en el peor de los casos de inserción. Esto asegura que el costo de búsqueda, inserción y borrado sea siempre logarítmico en el peor caso.
Dibuja un diagrama conceptual de un nodo en un árbol AVL que cumple la condición de balance.;\[ \begin{tikzpicture}[level distance=1.5cm, level 1/.style={sibling distance=3.5cm}, every node/.style={circle, draw, minimum size=0.8cm}, subtree/.style={draw, shape=rectangle, rounded corners, minimum height=1.5cm, minimum width=2cm, align=center} ]  \node {\(v\)}    child {node[subtree] (L) {\(A_1\)<br>\(h(A_1)=k\)}}    child {node[subtree] (R) {\(A_2\)<br>\(h(A_2)=k \text{ o } k\pm1\)}}; \end{tikzpicture} \]<br>La condición \(|h(A_1)-h(A_2)| \le 1\) se cumple en este nodo. Esto debe ser válido para TODOS los nodos del árbol.